using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using NUnit.Framework;
using ProtoBuf.Meta;

namespace TestUtilities.ProtobufContract
{
    [TestFixture]
    public class ProtobufContractGeneratorTest
    {
        public string _tempXmlFileCorrect;
        public string _tempXmlFileIncorrect;
        public string _tempProtoFile;
        public string _tempDirectory;

        [SetUp]
        public void Setup()
        {
            var tempDirectory = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());
            Directory.CreateDirectory(tempDirectory);
            _tempDirectory = tempDirectory;

            _tempXmlFileCorrect = Path.Combine(tempDirectory, "text2.xml");
            File.WriteAllText(_tempXmlFileCorrect, Resources.Resources.ProtobufMappingTest2);

            _tempXmlFileIncorrect = Path.Combine(tempDirectory, "text3.xml");
            File.WriteAllText(_tempXmlFileIncorrect, Resources.Resources.ProtobufMappingTest3);

            _tempProtoFile = Path.Combine(tempDirectory, "test.proto");
            File.WriteAllBytes(_tempProtoFile, Resources.Resources.test);
        }

        
        [Test]
        [Ignore("Use this to generate protobuf contract code")]
        public void GenerateCodeThatCreateProtobufModel()
        {
            var generator = new ProtobufContractGenerator(@"..\..\Resources\ProtobufMapping.xml");

            var namespaces = new List<string>
            {
                "AgGateway.ADAPT.ApplicationDataModel.LoggedData",
                "AgGateway.ADAPT.ApplicationDataModel.Common",
                "AgGateway.ADAPT.ApplicationDataModel.Representations",
                "AgGateway.ADAPT.ApplicationDataModel.Shapes",
                "AgGateway.ADAPT.ApplicationDataModel.ADM",
                "AgGateway.ADAPT.ApplicationDataModel.Documents",
                "AgGateway.ADAPT.ApplicationDataModel.Guidance",
                "AgGateway.ADAPT.ApplicationDataModel",
                "AgGateway.ADAPT.ApplicationDataModel.Notes"
            };

            // BEGINNING OF GENERATED CODE:
            // This code is generated by running the GenerateCodeThatCreateProtobufModel() method in ProtobufContractGeneratorTest
            // (but you have to manually copy it)

            Debug.WriteLine(@"// BEGINNING OF GENERATED CODE");
            Debug.WriteLine(@"// This code is generated by running the GenerateCodeThatCreateProtobufModel() method in ProtobufContractGeneratorTest");
            Debug.WriteLine(@"// (but you have to manually copy it here)");
            
            generator.GenerateContractCode(namespaces, "AgGateway.ADAPT.ApplicationDataModel.dll");

            Debug.WriteLine(@"// END OF GENERATED CODE:");
            Debug.WriteLine(@"//");
            Debug.WriteLine(@"//");
        }

        [Test]
        public void WhenExportThenFileIsWritten()
        {
            var generator = new ProtobufContractGenerator(_tempXmlFileCorrect);
            var model = generator.GenerateContractCode(new List<string> { "TestUtilities.ProtobufContract" }, "TestUtilities.dll");
            
            var filename = Path.Combine(_tempDirectory, "test.proto");

            var testClassA = new TestClassA { AString1 = "ABC", AString2 = "XYZ" };

            Write(filename, testClassA, model);

            File.Exists(filename);
        }

        [Test]
        public void WhenExportAndImportTestClassesThenWorks()
        {
            var generator = new ProtobufContractGenerator(_tempXmlFileCorrect);
            var model = generator.GenerateContractCode(new List<string> { "TestUtilities.ProtobufContract"}, "TestUtilities.dll");

            var filename = Path.Combine(_tempDirectory, "test.proto");

            var testClassA = new TestClassA { AString1 = "ABC", AString2 = "XYZ"};

            Write(filename, testClassA, model);

            var readTestClassA = Read<TestClassA>(filename, model);

            Assert.AreEqual(testClassA.AString1, readTestClassA.AString1);
            Assert.AreEqual(testClassA.AString2, readTestClassA.AString2);
        }

        [Test]
        public void WhenImportWithWrongContractThenDoesNotWork()
        {
            var generator = new ProtobufContractGenerator(_tempXmlFileIncorrect);

            var model = generator.GenerateContractCode(new List<string> { "TestUtilities.ProtobufContract" }, "TestUtilities.dll");

            var testClassA = new TestClassA { AString1 = "ABC", AString2 = "XYZ" };

            string filename = _tempProtoFile;

            var readTestClassA = Read<TestClassA>(filename, model);

            Assert.AreNotEqual(testClassA.AString1, readTestClassA.AString1);
            Assert.AreNotEqual(testClassA.AString2, readTestClassA.AString2);
        }

        [Test]
        public void WhenImportWithCorrectContractThenWorks()
        {
            var generator = new ProtobufContractGenerator(_tempXmlFileCorrect);
            var model = generator.GenerateContractCode(new List<string> { "TestUtilities.ProtobufContract" }, "TestUtilities.dll");

            var testClassA = new TestClassA { AString1 = "ABC", AString2 = "XYZ", AInt = 3 };

            string filename = _tempProtoFile;

            var readTestClassA = Read<TestClassA>(filename, model);

            Assert.AreEqual(testClassA.AString1, readTestClassA.AString1);
            Assert.AreEqual(testClassA.AString2, readTestClassA.AString2);
        }

        [Test]
        public void GivenBadAssemblyWhenGenerateThenModelIsNull()
        {
            var generator = new ProtobufContractGenerator(_tempXmlFileCorrect);
            var model = generator.GenerateContractCode(new List<string> { "TestUtilities.ProtobufContract" }, "ThisDoesntExist.dll");

            Assert.IsNull(model);
        }

        [Test]
        public void GivenBadXmlFileWhenGenerateThenModelIsNull()
        {
            var generator = new ProtobufContractGenerator(@"..\..\ProtobufTestFiles\HelloThere.xml");
            var model = generator.GenerateContractCode(new List<string> { "TestUtilities.ProtobufContract" }, "TestUtilities.dll");

            Assert.IsNull(model);
        }

        [TearDown]
        public void TearDown()
        {
            Directory.Delete(_tempDirectory, true);
        }

        private void Write<T>(string path, T content, RuntimeTypeModel model)
        {
            using (var fileStream = File.Open(path, FileMode.Create))
            {
                model.Serialize(fileStream, content);
            }
        }

        public T Read<T>(string path, RuntimeTypeModel model)
        {
            using (var fileStream = File.OpenRead(path))
            {
                return (T)model.Deserialize(fileStream, null, typeof(T));
            }
        }
    }

    public interface ITestClass
    {
        void DoNothing();
    }

    public class TestClassA
    {
        public string AString1 { get; set; }
        public string AString2 { get; set; }
        public int? AInt { get; set; }
    }

}
